{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,Y,GAAS,CAAC,aAAD,C;AACTC,a,GAAU,C;AACVC,Y,GAAS,Y;AAEXC,gB,GAAa,I;AAEbC,W,GAAQ,I;;mCAECC,iB;AAEX,qCAAc;AAAA;;AAEZ,gBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;;;0CAEsB;;AAErB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEtC,kBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,0BAAYI,eAAZ,GAA8B,aAAK;;AAEjCT,kCAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AAED,eAJD;;AAMAR,0BAAYS,SAAZ,GAAwB,aAAK;;AAE3B,oBAAI,CAAChB,UAAL,EAAiB;AACfA,+BAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,0BAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,6BAAWC,KAAX,GAAmB,YAAY;AAC7B,0BAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACD,mBAFD;AAGD;AACDE,wBAAQL,UAAR;AAED,eAXD;;AAaAO,0BAAYW,OAAZ,GAAsB,aAAK;;AAEzBC,wBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,uBAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,eALD;AAOD,aA9BM,CAAP;AA+BD;;;wCAEoBtB,U,EAAY;;AAE/BH,mBAAO0B,OAAP,CAAe,iBAAS;;AAEtB,kBAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;AACjD1B,yBAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AAED,aALD;AAOD;;;4CAEwB;;AAEvB,gBAAI7B,UAAJ,EAAgB;AACdC;AACAD,2BAAa,IAAb;AACAC,sBAAQ,IAAR;AACD;AACF","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\nconst version = 4;\nconst dbName = 'aluraframe';\n\nlet connection = null;\n\nlet close = null;\n\nexport class ConnectionFactory {\n\n  constructor() {\n\n    throw new Error('Não é possível criar instâncias de ConnectionFactory');\n  }\n\n  static getConnection() {\n\n    return new Promise((resolve, reject) => {\n\n      let openRequest = window.indexedDB.open(dbName, version);\n\n      openRequest.onupgradeneeded = e => {\n\n        ConnectionFactory._createStores(e.target.result);\n\n      };\n\n      openRequest.onsuccess = e => {\n\n        if (!connection) {\n          connection = e.target.result;\n          close = connection.close.bind(connection);\n          connection.close = function () {\n            throw new Error('Você não pode fechar diretamente a conexão');\n          };\n        }\n        resolve(connection);\n\n      };\n\n      openRequest.onerror = e => {\n\n        console.log(e.target.error);\n\n        reject(e.target.error.name);\n      };\n\n    });\n  }\n\n  static _createStores(connection) {\n\n    stores.forEach(store => {\n\n      if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n      connection.createObjectStore(store, { autoIncrement: true });\n\n    });\n\n  }\n\n  static closeConnection() {\n\n    if (connection) {\n      close();\n      connection = null;\n      close = null;\n    }\n  }\n}\n"]}